//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 matWVP;                    // Offset:    0, size:   64
    float4x4 matWorld;                  // Offset:   64, size:   64
    float4x4 matWorldInvTranspose;      // Offset:  128, size:   64
    Material material;                  // Offset:  192, size:   64
}

cbuffer cbPerFrame
{
    DirectionalLight gDirLight;         // Offset:    0, size:   64
    PointLight gPointLight;             // Offset:   64, size:   80
    SpotLight gSpotLight;               // Offset:  144, size:   96
    float3  gEyePosW;                   // Offset:  240, size:   12
}

//
// 2 local object(s)
//
Texture2D g_texDifuseMap;
SamplerState SamplerLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 DefaultTech
    {
        pass DefaultPass
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 matWVP;                   // Offset:    0 Size:    64
                //   float4x4 matWorld;                 // Offset:   64 Size:    64 [unused]
                //   float4x4 matWorldInvTranspose;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 vAmb;                   // Offset:  192
                //       float4 vDiff;                  // Offset:  208
                //       float4 vSpec;                  // Offset:  224
                //       float4 vReflect;               // Offset:  240
                //
                //   } material;                        // Offset:  192 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_output o3.xy
                dcl_temps 4
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                dp3 r0.x, v1.xyzx, cb0[0].xyzx
                dp3 r0.y, v1.xyzx, cb0[1].xyzx
                dp3 r0.z, v1.xyzx, cb0[2].xyzx
                mov r2.xyzw, v2.xyzw
                mov r3.xy, v3.xyxx
                mov o0.xyzw, r1.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o3.xy, r3.xyxx
                ret 
                // Approximately 16 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // NORMAL                   0   xyz         1     NONE  float       
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 1
                mov r0.xyzw, v2.xyzw
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

        pass LightPass
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 matWVP;                   // Offset:    0 Size:    64
                //   float4x4 matWorld;                 // Offset:   64 Size:    64
                //   float4x4 matWorldInvTranspose;     // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 vAmb;                   // Offset:  192
                //       float4 vDiff;                  // Offset:  208
                //       float4 vSpec;                  // Offset:  224
                //       float4 vReflect;               // Offset:  240
                //
                //   } material;                        // Offset:  192 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp3 r2.x, v1.xyzx, cb0[8].xyzx
                dp3 r2.y, v1.xyzx, cb0[9].xyzx
                dp3 r2.z, v1.xyzx, cb0[10].xyzx
                dp4 r3.x, r0.xyzw, cb0[0].xyzw
                dp4 r3.y, r0.xyzw, cb0[1].xyzw
                dp4 r3.z, r0.xyzw, cb0[2].xyzw
                dp4 r3.w, r0.xyzw, cb0[3].xyzw
                mov r0.xy, v3.xyxx
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r0.xyxx
                ret 
                // Approximately 18 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 matWVP;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 matWorld;                 // Offset:   64 Size:    64 [unused]
                //   float4x4 matWorldInvTranspose;     // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 vAmb;                   // Offset:  192
                //       float4 vDiff;                  // Offset:  208
                //       float4 vSpec;                  // Offset:  224
                //       float4 vReflect;               // Offset:  240
                //
                //   } material;                        // Offset:  192 Size:    64
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 vAmb;                   // Offset:    0
                //       float4 vDiff;                  // Offset:   16
                //       float4 vSpec;                  // Offset:   32
                //       float3 vDir;                   // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 vAmb;                   // Offset:   64
                //       float4 vDiff;                  // Offset:   80
                //       float4 vSpec;                  // Offset:   96
                //       float3 vPos;                   // Offset:  112
                //       float fRange;                  // Offset:  124
                //       float3 vAtt;                   // Offset:  128
                //       float pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 vAmb;                   // Offset:  144
                //       float4 vDiff;                  // Offset:  160
                //       float4 vSpec;                  // Offset:  176
                //       float3 vPos;                   // Offset:  192
                //       float fRange;                  // Offset:  204
                //       float3 vDir;                   // Offset:  208
                //       float fSpot;                   // Offset:  220
                //       float3 vAtt;                   // Offset:  224
                //       float pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // SamplerLinear                     sampler      NA          NA    0        1
                // g_texDifuseMap                    texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[16], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 17
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx
                dp3 r0.w, v2.xyzx, v2.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v2.xyzx
                mov r2.xyz, -v1.xyzx
                add r2.xyz, r2.xyzx, cb1[15].xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx
                mov r3.xyz, cb0[12].xyzx
                mov r4.xyz, cb0[13].xyzx
                mov r5.xyzw, cb0[14].xyzw
                mov r6.xyz, cb1[0].xyzx
                mov r7.xyz, cb1[1].xyzx
                mov r8.xyz, cb1[2].xyzx
                mov r9.xyz, cb1[3].xyzx
                mov r1.xyz, r1.xyzx
                mov r2.xyz, r2.xyzx
                mov r9.xyz, -r9.xyzx
                mul r6.xyz, r3.xyzx, r6.xyzx
                dp3 r0.w, r9.xyzx, r1.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r9.xyzx
                dp3 r2.w, r9.xyzx, r1.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r10.xyz, r1.xyzx, r2.wwww
                add r9.xyz, r9.xyzx, r10.xyzx
                dp3 r2.w, r9.xyzx, r2.xyzx
                max r2.w, r2.w, l(0.000000)
                log r2.w, r2.w
                mul r2.w, r2.w, r5.w
                exp r2.w, r2.w
                mul r9.xyz, r4.xyzx, r0.wwww
                mul r7.xyz, r7.xyzx, r9.xyzx
                mul r9.xyz, r5.xyzx, r2.wwww
                mul r8.xyz, r8.xyzx, r9.xyzx
                movc r7.xyz, r1.wwww, r7.xyzx, l(0,0,0,0)
                movc r8.xyz, r1.wwww, r8.xyzx, l(0,0,0,0)
                mov r6.xyz, r6.xyzx
                mov r7.xyz, r7.xyzx
                mov r8.xyz, r8.xyzx
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r8.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                mov r9.xyz, cb1[4].xyzx
                mov r10.xyz, cb1[5].xyzx
                mov r11.xyz, cb1[6].xyzx
                mov r12.xyz, cb1[7].xyzx
                mov r0.w, cb1[7].w
                mov r13.xyz, cb1[8].xyzx
                mov r14.xyz, v1.xyzx
                mov r14.xyz, -r14.xyzx
                add r12.xyz, r12.xyzx, r14.xyzx
                dp3 r1.w, r12.xyzx, r12.xyzx
                sqrt r15.y, r1.w
                lt r0.w, r0.w, r15.y
                if_z r0.w
                  div r12.xyz, r12.xyzx, r15.yyyy
                  mul r9.xyz, r3.xyzx, r9.xyzx
                  dp3 r0.w, r12.xyzx, r1.xyzx
                  lt r1.w, l(0.000000), r0.w
                  mov r12.xyz, -r12.xyzx
                  dp3 r2.w, r12.xyzx, r1.xyzx
                  add r2.w, r2.w, r2.w
                  mov r2.w, -r2.w
                  mul r16.xyz, r1.xyzx, r2.wwww
                  add r12.xyz, r12.xyzx, r16.xyzx
                  dp3 r2.w, r12.xyzx, r2.xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, r5.w
                  exp r2.w, r2.w
                  mul r12.xyz, r4.xyzx, r0.wwww
                  mul r10.xyz, r10.xyzx, r12.xyzx
                  mul r12.xyz, r5.xyzx, r2.wwww
                  mul r11.xyz, r11.xyzx, r12.xyzx
                  movc r10.xyz, r1.wwww, r10.xyzx, l(0,0,0,0)
                  movc r11.xyz, r1.wwww, r11.xyzx, l(0,0,0,0)
                  mul r15.z, r15.y, r15.y
                  mov r15.x, l(1.000000)
                  dp3 r0.w, r13.xyzx, r15.xyzx
                  div r0.w, l(1.000000), r0.w
                  mul r10.xyz, r0.wwww, r10.xyzx
                  mul r11.xyz, r0.wwww, r11.xyzx
                else 
                  mov r9.xyz, l(0,0,0,0)
                  mov r10.xyz, l(0,0,0,0)
                  mov r11.xyz, l(0,0,0,0)
                endif 
                mov r9.xyz, r9.xyzx
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r6.xyz, r6.xyzx, r9.xyzx
                add r7.xyz, r7.xyzx, r10.xyzx
                add r8.xyz, r8.xyzx, r11.xyzx
                mov r9.xyz, cb1[9].xyzx
                mov r10.xyz, cb1[10].xyzx
                mov r11.xyz, cb1[11].xyzx
                mov r12.xyz, cb1[12].xyzx
                mov r13.xyz, cb1[13].xyzx
                mov r15.xyz, cb1[14].xyzx
                mov r0.w, cb1[12].w
                mov r1.w, cb1[13].w
                add r12.xyz, r14.xyzx, r12.xyzx
                dp3 r2.w, r12.xyzx, r12.xyzx
                sqrt r14.y, r2.w
                lt r0.w, r0.w, r14.y
                if_z r0.w
                  div r12.xyz, r12.xyzx, r14.yyyy
                  mul r3.xyz, r3.xyzx, r9.xyzx
                  dp3 r0.w, r12.xyzx, r1.xyzx
                  lt r2.w, l(0.000000), r0.w
                  mov r9.xyz, -r12.xyzx
                  dp3 r3.w, r9.xyzx, r1.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r1.xyz, r1.xyzx, r3.wwww
                  add r1.xyz, r9.xyzx, r1.xyzx
                  dp3 r1.x, r1.xyzx, r2.xyzx
                  max r1.x, r1.x, l(0.000000)
                  log r1.x, r1.x
                  mul r1.x, r1.x, r5.w
                  exp r1.x, r1.x
                  mul r2.xyz, r4.xyzx, r0.wwww
                  mul r2.xyz, r10.xyzx, r2.xyzx
                  mul r1.xyz, r5.xyzx, r1.xxxx
                  mul r1.xyz, r11.xyzx, r1.xyzx
                  movc r2.xyz, r2.wwww, r2.xyzx, l(0,0,0,0)
                  movc r1.xyz, r2.wwww, r1.xyzx, l(0,0,0,0)
                  dp3 r0.w, r9.xyzx, r13.xyzx
                  max r0.w, r0.w, l(0.000000)
                  log r0.w, r0.w
                  mul r0.w, r0.w, r1.w
                  exp r0.w, r0.w
                  mul r14.z, r14.y, r14.y
                  mov r14.x, l(1.000000)
                  dp3 r1.w, r15.xyzx, r14.xyzx
                  div r1.w, r0.w, r1.w
                  mul r3.xyz, r0.wwww, r3.xyzx
                  mul r2.xyz, r1.wwww, r2.xyzx
                  mul r1.xyz, r1.wwww, r1.xyzx
                else 
                  mov r3.xyz, l(0,0,0,0)
                  mov r2.xyz, l(0,0,0,0)
                  mov r1.xyz, l(0,0,0,0)
                endif 
                mov r3.xyz, r3.xyzx
                mov r2.xyz, r2.xyzx
                mov r1.xyz, r1.xyzx
                add r3.xyz, r3.xyzx, r6.xyzx
                add r2.xyz, r2.xyzx, r7.xyzx
                add r1.xyz, r1.xyzx, r8.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx
                mov r0.w, cb0[13].w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 161 instruction slots used
                            
            };
        }

    }

}

